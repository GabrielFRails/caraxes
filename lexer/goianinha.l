/* goianinha.l - Lexical analyzer for Goianinha language (generated by LLM) */

/* commented because we defintions that match with yylval */
/* {ID}          { return ID; } */
/* {INTCONST}    { return INTCONST; } */
/* {CARCONST}    { return CARCONST; } */
/* {STRING}      { return STRING; } */

%{
#include <stdio.h>
#include <string.h>
#include "tokens.h"

/* External variables used by Flex */
extern int yylineno;
extern char* yytext;

/* Define yylval union */
union {
    char *str;
    int num;
} yylval;

%}

%option noyywrap
%option yylineno

LETTER    [a-zA-Z]
DIGIT     [0-9]
ID        ({LETTER}|_)({LETTER}|{DIGIT}|_)*
INTCONST  {DIGIT}+
CARCONST  '([^'\\]|\\.)'
STRING    \"([^\"\n\\]|\\.)*\"

%%

"programa"    { return PROGRAMA; }
"car"         { return CAR; }
"int"         { return INT; }
"retorne"     { return RETORNE; }
"leia"        { return LEIA; }
"escreva"     { return ESCREVA; }
"novalinha"   { return NOVALINHA; }
"se"          { return SE; }
"entao"       { return ENTAO; }
"senao"       { return SENAO; }
"enquanto"    { return ENQUANTO; }
"execute"     { return EXECUTE; }
"ou"          { return OR; }
"e"           { return AND; }

{ID}          { yylval.str = strdup(yytext); return ID; }
{INTCONST}    { yylval.num = atoi(yytext); return INTCONST; }
{CARCONST}    { yylval.str = strdup(yytext); return CARCONST; }
{STRING}      { yylval.str = strdup(yytext); return STRING; }

"+"           { return PLUS; }
"-"           { return MINUS; }
"*"           { return TIMES; }
"/"           { return DIV; }
"="           { return ASSIGN; }
"=="          { return EQ; }
"!="          { return NEQ; }
"<"           { return LT; }
">"           { return GT; }
"<="          { return LE; }
">="          { return GE; }
"("           { return LPAREN; }
")"           { return RPAREN; }
"{"           { return LBRACE; }
"}"           { return RBRACE; }
";"           { return SEMI; }
","           { return COMMA; }

"/*"          { /* Skip comments */
                int c;
                while (1) {
                    c = input();
                    if (c == EOF || c == 0) {
                        fprintf(stderr, "ERRO: COMENTÁRIO NAO TERMINA %d\n", yylineno);
                        return -1;
                    }
                    if (c == '*') {
                        c = input();
                        if (c == EOF || c == 0) {
                            fprintf(stderr, "ERRO: COMENTÁRIO NAO TERMINA %d\n", yylineno);
                            return -1;
                        }
                        if (c == '/') {
                            break;
                        }
                    }
                }
              }

[ \t\n]+      { /* Ignore whitespace */ }

{STRING}\n    { fprintf(stderr, "ERRO: CADEIA DE CARACTERES OCUPA MAIS DE UMA LINHA %d\n", yylineno);
                return -1; }

.             { fprintf(stderr, "ERRO: CARACTERE INVÁLIDO %d\n", yylineno);
                return -1; }

<<EOF>>       { return 0; }

%%