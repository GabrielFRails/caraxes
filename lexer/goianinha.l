/* goianinha.l - Lexical analyzer for Goianinha language (generated by LLM) */

%{
#include <stdio.h>
#include <string.h>

/* Token codes (to be returned by yylex) */
#define PROGRAMA       1
#define CAR            2
#define INT            3
#define RETORNE        4
#define LEIA           5
#define ESCREVA        6
#define NOVALINHA      7
#define SE             8
#define ENTAO          9
#define SENAO         10
#define ENQUANTO      11
#define EXECUTE       12
#define ID            13
#define INTCONST      14
#define CARCONST      15
#define STRING        16
#define PLUS          17
#define MINUS         18
#define TIMES         19
#define DIV           20
#define ASSIGN        21
#define EQ            22
#define NEQ           23
#define LT            24
#define GT            25
#define LE            26
#define GE            27
#define LPAREN        28
#define RPAREN        29
#define LBRACE        30
#define RBRACE        31
#define SEMI          32
#define COMMA         33

/* External variables used by Flex */
extern int yylineno;
extern char* yytext;

%}

%option noyywrap
%option yylineno

LETTER    [a-zA-Z]
DIGIT     [0-9]
ID        ({LETTER}|_)({LETTER}|{DIGIT}|_)*
INTCONST  {DIGIT}+
CARCONST  '([^'\\]|\\.)'
STRING    \"([^\"\n\\]|\\.)*\"

%%

"programa"    { return PROGRAMA; }
"car"         { return CAR; }
"int"         { return INT; }
"retorne"     { return RETORNE; }
"leia"        { return LEIA; }
"escreva"     { return ESCREVA; }
"novalinha"   { return NOVALINHA; }
"se"          { return SE; }
"entao"       { return ENTAO; }
"senao"       { return SENAO; }
"enquanto"    { return ENQUANTO; }
"execute"     { return EXECUTE; }

{ID}          { return ID; }
{INTCONST}    { return INTCONST; }
{CARCONST}    { return CARCONST; }
{STRING}      { return STRING; }

"+"           { return PLUS; }
"-"           { return MINUS; }
"*"           { return TIMES; }
"/"           { return DIV; }
"="           { return ASSIGN; }
"=="          { return EQ; }
"!="          { return NEQ; }
"<"           { return LT; }
">"           { return GT; }
"<="          { return LE; }
">="          { return GE; }
"("           { return LPAREN; }
")"           { return RPAREN; }
"{"           { return LBRACE; }
"}"           { return RBRACE; }
";"           { return SEMI; }
","           { return COMMA; }

"/*"          { /* Skip comments */
                int c;
                for (;;) {
                    c = input();
                    if (c == EOF) {
                        fprintf(stderr, "ERRO: COMENTÁRIO NAO TERMINA %d\n", yylineno);
                        return -1;
                    }
                    if (c == '*') {
                        if ((c = input()) == '/') {
                            break;
                        }
                        if (c != EOF) {
                            unput(c);
                        }
                    }
                }
              }

[ \t\n]+      { /* Ignore whitespace */ }

{STRING}\n    { printf("ERRO: CADEIA DE CARACTERES OCUPA MAIS DE UMA LINHA %d\n", yylineno);
                return -1; }

.             { printf("ERRO: CARACTERE INVÁLIDO %d\n", yylineno);
                return -1; }

%%
